---
import { Image } from "astro:assets";

import Godot from "@assets/QMeteor/QMeteor.png";

export const prerender = true;
---

<script src="/QMeteor/QMeteor.js" is:inline></script>

<section class="mx-auto aspect-video w-fit md:min-w-[650px]">
  <canvas id="canvas" class="aspect-video md:min-w-[650px]">
    Your browser does not support the canvas tag.</canvas
  >

  <noscript>Your browser does not support JavaScript.</noscript>

  <div id="status" class="h-full w-full">
    <progress id="status-progress" class="mx-auto mt-auto mb-[10%]"></progress>
    <Image
      id="status-splash"
      class="show-image--true use-filter--true h-full w-full"
      src={Godot}
      alt="Godot Engine Logo"
    />
    <div id="status-notice" class=""></div>
  </div>
</section>

<style>
  section,
  div#status {
    display: grid;
    place-content: center;

    > * {
      grid-area: 1 / 1;
    }
  }

  #status-progress {
    margin-top: auto;
  }

  div#status > img {
    width: 100%;
    height: 100%;
  }
</style>

<script is:inline>
  const GODOT_CONFIG = {
    args: [],
    canvasResizePolicy: 1,
    emscriptenPoolSize: 8,
    ensureCrossOriginIsolationHeaders: true,
    executable: "/QMeteor/QMeteor",
    experimentalVK: false,
    fileSizes: {
      "/QMeteor/QMeteor.pck": 165228,
      "/QMeteor/QMeteor.wasm": 36160334
    },
    focusCanvas: true,
    gdextensionLibs: [],
    godotPoolSize: 4
  };

  const GODOT_THREADS_ENABLED = false;
  const engine = new Engine(GODOT_CONFIG);

  document.addEventListener("astro:page-load", function () {
    const statusOverlay = document.getElementById("status");
    const statusProgress = document.getElementById("status-progress");
    const statusNotice = document.getElementById("status-notice");

    let initializing = true;
    let statusMode = "";

    function setStatusMode(mode) {
      if (statusMode === mode || !initializing) {
        return;
      }
      if (mode === "hidden") {
        statusOverlay.remove();
        initializing = false;
        return;
      }
      statusOverlay.style.visibility = "visible";
      statusProgress.style.display = mode === "progress" ? "block" : "none";
      statusNotice.style.display = mode === "notice" ? "block" : "none";
      statusMode = mode;
    }

    function setStatusNotice(text) {
      while (statusNotice.lastChild) {
        statusNotice.removeChild(statusNotice.lastChild);
      }
      const lines = text.split("\n");
      lines.forEach((line) => {
        statusNotice.appendChild(document.createTextNode(line));
        statusNotice.appendChild(document.createElement("br"));
      });
    }

    function displayFailureNotice(err) {
      console.error(err);
      if (err instanceof Error) {
        setStatusNotice(err.message);
      } else if (typeof err === "string") {
        setStatusNotice(err);
      } else {
        setStatusNotice("An unknown error occurred.");
      }
      setStatusMode("notice");
      initializing = false;
    }

    const missing = Engine.getMissingFeatures({
      threads: GODOT_THREADS_ENABLED
    });

    if (missing.length !== 0) {
      if (
        GODOT_CONFIG["serviceWorker"] &&
        GODOT_CONFIG["ensureCrossOriginIsolationHeaders"] &&
        "serviceWorker" in navigator
      ) {
        let serviceWorkerRegistrationPromise;
        try {
          serviceWorkerRegistrationPromise =
            navigator.serviceWorker.getRegistration();
        } catch (err) {
          serviceWorkerRegistrationPromise = Promise.reject(
            new Error("Service worker registration failed.")
          );
        }
        // There's a chance that installing the service worker would fix the issue
        Promise.race([
          serviceWorkerRegistrationPromise
            .then((registration) => {
              if (registration != null) {
                return Promise.reject(
                  new Error("Service worker already exists.")
                );
              }
              return registration;
            })
            .then(() => engine.installServiceWorker()),
          // For some reason, `getRegistration()` can stall
          new Promise((resolve) => {
            setTimeout(() => resolve(), 2000);
          })
        ])
          .then(() => {
            // Reload if there was no error.
            window.location.reload();
          })
          .catch((err) => {
            console.error("Error while registering service worker:", err);
          });
      } else {
        // Display the message as usual
        const missingMsg =
          "Error\nThe following features required to run Godot projects on the Web are missing:\n";
        displayFailureNotice(missingMsg + missing.join("\n"));
      }
    } else {
      setStatusMode("progress");
      engine
        .startGame({
          onProgress: function (current, total) {
            if (current > 0 && total > 0) {
              statusProgress.value = current;
              statusProgress.max = total;
            } else {
              statusProgress.removeAttribute("value");
              statusProgress.removeAttribute("max");
            }
          }
        })
        .then(() => {
          setStatusMode("hidden");
        }, displayFailureNotice);
    }
  });
</script>

<style is:inline>
  #canvas {
    display: block;
  }

  #canvas:focus {
    outline: none;
  }

  /* #status,
  #status-splash,
  #status-progress {
    position: absolute;
    left: 0;
    right: 0;
  } */
  /*
  #status,
  #status-splash {
    top: 0;
    bottom: 0;
  } */

  #status {
    background-color: #242424;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    visibility: hidden;
  }

  #status-splash {
  }

  #status-splash.show-image--false {
    display: none;
  }

  #status-splash.fullsize--true {
    height: 100%;
    width: 100%;
    object-fit: contain;
  }

  #status-splash.use-filter--false {
    image-rendering: pixelated;
  }

  /* #status-progress,
  #status-notice {
    display: none;
  } */

  #status-progress {
    width: 80%;
    margin-inline: auto;
  }

  #status-notice {
    background-color: #5b3943;
    border-radius: 0.5rem;
    border: 1px solid #9b3943;
    color: #e0e0e0;
    font-family: "Noto Sans", "Droid Sans", Arial, sans-serif;
    line-height: 1.3;
    margin: 0 2rem;
    overflow: hidden;
    padding: 1rem;
    text-align: center;
    z-index: 1;
  }
</style>
